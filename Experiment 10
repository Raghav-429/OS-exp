#include <iostream>
#include <thread>
#include <semaphore.h>
#include <vector>
#include <chrono>

using namespace std;

const int NUM_PHILOSOPHERS = 5;

// Semaphore for each fork
sem_t forks[NUM_PHILOSOPHERS];

// Semaphore to ensure no two philosophers access the critical section simultaneously
sem_t mutex;

// Function for each philosopher's actions (thinking and eating)
void philosopher(int id) {
    while (true) {
        // Thinking
        cout << "Philosopher " << id << " is thinking." << endl;
        this_thread::sleep_for(chrono::seconds(1));

        // Picking up forks (must acquire both forks for eating)
        sem_wait(&mutex);  // Enter critical section to pick up forks
        sem_wait(&forks[id]); // Pick up left fork
        sem_wait(&forks[(id + 1) % NUM_PHILOSOPHERS]); // Pick up right fork
        sem_post(&mutex);  // Leave critical section

        // Eating
        cout << "Philosopher " << id << " is eating." << endl;
        this_thread::sleep_for(chrono::seconds(1));

        // Putting down forks
        sem_post(&forks[id]); // Put down left fork
        sem_post(&forks[(id + 1) % NUM_PHILOSOPHERS]); // Put down right fork

        // Rest for a moment before thinking again
        this_thread::sleep_for(chrono::seconds(1));
    }
}

int main() {
    // Initialize semaphores
    sem_init(&mutex, 0, 1);  // Mutex to control access to forks
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1);  // Each fork starts as available
    }

    // Create philosopher threads
    vector<thread> philosopher_threads;
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_threads.push_back(thread(philosopher, i));
    }

    // Join philosopher threads (in this example, they run indefinitely)
    for (auto& t : philosopher_threads) {
        t.join();
    }

    // Destroy semaphores (not reached in this example since threads run indefinitely)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&forks[i]);
    }
    sem_destroy(&mutex);

    return 0;
}

