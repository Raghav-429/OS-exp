i)	FCFS with Arrival time



#include<iostream>
using namespace std;
// Function to find completion, turn around, and waiting time
void findTimes (int processes[], int n, int at[], int bt[], int ct[], int tat[], int wt[]) {
int currentTime = 0;
// Calculating completion time
for
(int i=0; i < n; i++) {
if (currentTime < at[i]) { // If the current time is less than arrival time, wait
currentTime at[i];
}
ct[i] = currentTime+ bt[i]; // Completion time current time + burst time
currentTime ct[i];
// Update current time
// Calculating turnaround time and waiting time
tat[i] = ct[i] at[i];
// Turnaround time completion time arrival time
wt[i] = tat[i]bt[i];
// Waiting time turnaround time burst time
}
}
// Function to print all times and calculate average times
void findavgTime(int processes[], int n, int at [], int bt[]) {
int ct[n], tat[n], wt[n];
int total_tate, total_wt = 8;
findTimes (processes, n, at, bt, ct, tat, wt); // Calculate times
// Display results
cout << "Processes Arrival Time Burst Time Completion Time Turnaround Time Waiting Time\n";
for (int i = 0; i < n; i++) {
total_tat + tat[i];
total_wt + wt[i];
cout <<<<<< "<<< processes[i] << "\t\t" << at[i] << "\t\t" << bt[i] << "\t\t"
<<<<< ct[i] <<<<"\t\t" << tat[i] << "\t\t\t" << wt[i] << endl;
}

cout << "\nAverage Turnaround Time = <<<<< (float)total_tat (float)n; cout << "\nAverage Waiting Time = " << (float)total_wt (float)n;
}
int main() {
int n;
cout << "Enter number of processes: ";
cin >> n;
int processes [n], at[n], bt[n];
// Taking input for arrival time and burst time
for (int i=0; i < n; i++) {
processes[i] = i + 1;
cout << "Enter arrival time and burst time for process"<<< processes[i] << ": ";
cin >> at[i] >> bt[i];
}
// Calculate average time and other metrics
findavgTime (processes, n, at, bt);
return 0;
}

ii)	FCFS without Arrival time

#include <iostream>
#include <vector>
using namespace std;

struct Process {
    int id;         // Process ID
    int burstTime;  // Burst Time
    int completionTime; // Completion Time
    int turnAroundTime; // Turnaround Time
    int waitingTime;    // Waiting Time
};
 
int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    vector<Process> processes(n);

    // Input Burst Time for each process
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        cout << "Enter Burst Time for Process " << processes[i].id << ": ";
        cin >> processes[i].burstTime;
    }

    // Calculating CT, TAT, and WT
    int currentTime = 0;
    double totalTAT = 0, totalWT = 0;

    for (int i = 0; i < n; i++) {
        processes[i].completionTime = currentTime + processes[i].burstTime;
        currentTime = processes[i].completionTime;

        processes[i].turnAroundTime = processes[i].completionTime;
        processes[i].waitingTime = processes[i].turnAroundTime - processes[i].burstTime;

        totalTAT += processes[i].turnAroundTime;
        totalWT += processes[i].waitingTime;
    }

    // Display Results
    cout << "\nProcess\tBT\tCT\tTAT\tWT\n";
    for (const auto &p : processes) {
        cout << "P" << p.id << "\t" 
             << p.burstTime << "\t" 
             << p.completionTime << "\t" 
             << p.turnAroundTime << "\t" 
             << p.waitingTime << "\n";
    }

    //Display Averages
    cout << "\nAverage Turnaround Time: " << totalTAT / n << endl;
    cout << "Average Waiting Time: " << totalWT / n << endl;

    return 0;
}
